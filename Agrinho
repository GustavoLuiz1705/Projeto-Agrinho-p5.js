let estadoJogo = "introducao"; // Estados: introducao, simulacao, resultado
let botaoIniciar;
let fazenda;
let score = 0;
let tempoRestante = 60;
let intervaloTempo;

// Elementos da fazenda (você pode adicionar mais e personalizar)
let milho;
let agua;
let insetos = [];
let joaninhas = [];

function preload() {
  // Carregue imagens e sons aqui, se necessário
  // loadImage("assets/milho.png");
  // loadImage("assets/agua.png");
}

function setup() {
  createCanvas(600, 400);
  botaoIniciar = createButton("Iniciar Simulação");
  botaoIniciar.position(width / 2 - botaoIniciar.width / 2, height / 2 + 50);
  botaoIniciar.mousePressed(iniciarSimulacao);

  fazenda = new Fazenda();
  milho = new Milho(100, 200);
  agua = new Agua(400, 300);

  // Inicializa alguns insetos "praga"
  for (let i = 0; i < 5; i++) {
    insetos.push(new Inseto(random(width), random(height)));
  }

  // Inicializa algumas joaninhas "benéficas"
  for (let i = 0; i < 3; i++) {
    joaninhas.push(new Joaninha(random(width), random(height)));
  }
}

function draw() {
  background(135, 206, 235); // Azul claro representando o céu

  if (estadoJogo === "introducao") {
    textAlign(CENTER);
    textSize(32);
    fill(0, 100, 0); // Verde escuro
    text("Agrinho: Ecossistema Interativo", width / 2, height / 4);
    textSize(16);
    fill(50);
    text("Clique no botão para iniciar a simulação de uma fazenda sustentável.", width / 2, height / 2);
  } else if (estadoJogo === "simulacao") {
    fazenda.mostrar();
    milho.mostrar();
    agua.mostrar();

    // Mostrar e mover insetos
    for (let inseto of insetos) {
      inseto.mostrar();
      inseto.mover();
      if (dist(inseto.x, inseto.y, mouseX, mouseY) < 20 && mouseIsPressed) {
        score -= 5; // Penalidade por "interagir" negativamente com a praga
        inseto.x = random(width);
        inseto.y = random(height);
      }
    }

    // Mostrar e mover joaninhas
    for (let joaninha of joaninhas) {
      joaninha.mostrar();
      joaninha.mover();
      if (dist(joaninha.x, joaninha.y, mouseX, mouseY) < 20 && mouseIsPressed) {
        score += 10; // Pontos por "interagir" positivamente com a joaninha
        joaninha.x = random(width);
        joaninha.y = random(height);
      }
    }

    // Interação com a água (simples clique para "regar")
    if (dist(agua.x, agua.y, mouseX, mouseY) < 30 && mouseIsPressed) {
      milho.regar();
    }

    // Atualizar o estado do milho
    milho.atualizar();

    // Aumentar o score com o tempo (simulando crescimento)
    if (frameCount % 60 === 0) { // A cada segundo
      score += milho.nivelHidratacao; // Recompensa baseada na hidratação
      tempoRestante--;
      if (tempoRestante <= 0) {
        estadoJogo = "resultado";
        clearInterval(intervaloTempo);
      }
    }

    // Mostrar score e tempo
    textSize(16);
    fill(0);
    text("Score: " + score, 20, 30);
    text("Tempo: " + tempoRestante, 20, 50);

  } else if (estadoJogo === "resultado") {
    textAlign(CENTER);
    textSize(32);
    fill(0, 100, 0);
    text("Simulação Finalizada!", width / 2, height / 4);
    textSize(16);
    fill(50);
    text("Seu score final foi: " + score, width / 2, height / 2);
    text("Clique para reiniciar", width / 2, height / 2 + 30);
  }
}

function mouseClicked() {
  if (estadoJogo === "resultado") {
    resetGame();
  }
}

function iniciarSimulacao() {
  estadoJogo = "simulacao";
  botaoIniciar.hide();
  resetGame(); // Garante que o jogo comece com valores iniciais
}

function resetGame() {
  score = 0;
  tempoRestante = 60;
  milho.nivelHidratacao = 1; // Reinicia o nível de hidratação
  insetos = [];
  joaninhas = [];
  for (let i = 0; i < 5; i++) {
    insetos.push(new Inseto(random(width), random(height)));
  }
  for (let i = 0; i < 3; i++) {
    joaninhas.push(new Joaninha(random(width), random(height)));
  }
}

class Fazenda {
  constructor() {
    this.corSolo = color(139, 69, 19); // Marrom
  }

  mostrar() {
    fill(this.corSolo);
    rect(0, height * 0.6, width, height * 0.4); // Representa o solo
  }
}

class Milho {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.tamanho = 30;
    this.cor = color(255, 255, 0); // Amarelo
    this.nivelHidratacao = 1; // Nível de hidratação (1 a 3)
  }

  mostrar() {
    fill(this.cor);
    ellipse(this.x, this.y, this.tamanho, this.tamanho * 2); // Representação simples do milho
    fill(0, 100, 0);
    rect(this.x - 10, this.y + this.tamanho, 20, this.nivelHidratacao * 10); // Barra de hidratação
  }

  regar() {
    this.nivelHidratacao = min(3, this.nivelHidratacao + 1);
  }

  atualizar() {
    if (this.nivelHidratacao > 1) {
      this.tamanho = lerp(30, 40, (this.nivelHidratacao - 1) / 2); // Cresce se hidratado
      this.cor = lerpColor(color(255, 255, 0), color(0, 255, 0), (this.nivelHidratacao - 1) / 2); // Muda de cor
    } else {
      this.tamanho = 30;
      this.cor = color(255, 255, 0);
    }
    this.nivelHidratacao = max(0.5, this.nivelHidratacao - 0.005); // Perde hidratação gradualmente
  }
}

class Agua {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.raio = 25;
    this.cor = color(0, 0, 255, 150); // Azul transparente
  }

  mostrar() {
    fill(this.cor);
    ellipse(this.x, this.y, this.raio * 2);
    fill(0, 0, 255);
    textAlign(CENTER, CENTER);
    textSize(12);
    text("Água", this.x, this.y);
  }
}

class Inseto {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.tamanho = 15;
    this.cor = color(100, 50, 0); // Marrom escuro
    this.velocidadeX = random(-1, 1);
    this.velocidadeY = random(-1, 1);
  }

  mostrar() {
    fill(this.cor);
    ellipse(this.x, this.y, this.tamanho);
  }

  mover() {
    this.x += this.velocidadeX;
    this.y += this.velocidadeY;
    if (this.x < 0 || this.x > width) {
      this.velocidadeX *= -1;
    }
    if (this.y < 0 || this.y > height) {
      this.velocidadeY *= -1;
    }
  }
}

class Joaninha {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.tamanho = 15;
    this.cor = color(255, 0, 0); // Vermelho
    this.velocidadeX = random(-0.5, 0.5);
    this.velocidadeY = random(-0.5, 0.5);
  }

  mostrar() {
    fill(this.cor);
    ellipse(this.x, this.y, this.tamanho);
    fill(0);
    ellipse(this.x - 3, this.y - 3, 3);
    ellipse(this.x + 3, this.y + 3, 3);
  }

  mover() {
    this.x += this.velocidadeX;
    this.y += this.velocidadeY;
    if (this.x < 0 || this.x > width) {
      this.velocidadeX *= -1;
    }
    if (this.y < 0 || this.y > height) {
      this.velocidadeY *= -1;
    }
  }
}
